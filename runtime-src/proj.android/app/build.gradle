apply plugin: 'com.android.application'
apply plugin: 'bugly'
//apply plugin: 'com.huawei.agconnect' @huawei

bugly {
    appId = 'c082cf3ca0'
    appKey = 'c332369f-17b2-4f8e-9481-5810319e8c46'
}

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()

    defaultConfig {
        applicationId "com.codetypes.hellolua"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 100
        versionName "1.1.0"

        externalNativeBuild {
            cmake {
                targets 'cocoslua'
                arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                cppFlags "-frtti -fexceptions -fsigned-char"
            }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    externalNativeBuild {
        cmake {
            path "../../../CMakeLists.txt"
        }
    }

    signingConfigs {

       release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            signingConfig signingConfigs.release
        }
    }
}

def compileAssets(path) {
    def cmdArgs = ["${projectDir}/../../../tools/bin/lua_wrapper.sh", "../hot-update/build-assets.lua", path]
    println 'running command : ' + cmdArgs.join(' ')
    exec {
        executable "/bin/bash"
        args cmdArgs
    }
}

android.applicationVariants.all { variant ->
    def srcAssets = "${projectDir}/../../../assets"
    def destAssets = "${projectDir}/assets"

    delete destAssets

    def targetName = variant.name.capitalize()
    def copyTaskName = "copy${targetName}ResourcesToAssets"
    tasks.register(copyTaskName) {
        copy {
            from srcAssets
            into destAssets
            exclude "builtin.manifest"
        }
        compileAssets(destAssets)
    }
    tasks.getByName("pre${targetName}Build").dependsOn copyTaskName
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation project(':libxgame')

    implementation 'com.android.support:support-v4:28.0.0'

    // implementation project(':plugin-alipay')
    // implementation project(':plugin-talkingdata')
    // implementation project(':plugin-huawei')
    // implementation project(':plugin-vivo')
    // implementation project(':plugin-oppo')
}
