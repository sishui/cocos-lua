-- AUTO BUILD, DON'T MODIFY!

dofile "autobuild/box2d-types.lua"

name = "box2d"
path = "../../frameworks/libxgame/src/lua-bindings"
headers = [[
    #include "lua-bindings/lua_conv.h"
    #include "lua-bindings/lua_conv_manual.h"
    #include "cclua/xlua.h"
    #include "cocos2d.h"
    #include "box2d/box2d.h"
    #include "box2d/Box2DAdapter.h"
]]
chunk = nil
luaopen = nil

typeconv 'b2Vec2'
    .var('x', 'float x')
    .var('y', 'float y')

typeconv 'b2Vec3'
    .var('x', 'float x')
    .var('y', 'float y')
    .var('z', 'float z')

typeconv 'b2ContactID'
    .var('cf', 'b2ContactFeature cf')
    .var('key', 'uint32 key')

typeconv 'b2ContactFeature'
    .var('indexA', 'uint8 indexA')
    .var('indexB', 'uint8 indexB')
    .var('typeA', 'uint8 typeA')
    .var('typeB', 'uint8 typeB')

typeconv 'b2Color'
    .var('r', 'float r')
    .var('g', 'float g')
    .var('b', 'float b')
    .var('a', 'float a')

typeconv 'b2FixtureUserData'
    .var('pointer', 'uintptr_t pointer')

typeconv 'b2Filter'
    .var('categoryBits', 'uint16 categoryBits')
    .var('maskBits', 'uint16 maskBits')
    .var('groupIndex', 'int16 groupIndex')

typeconv 'b2ManifoldPoint'
    .var('localPoint', 'b2Vec2 localPoint')
    .var('normalImpulse', 'float normalImpulse')
    .var('tangentImpulse', 'float tangentImpulse')
    .var('id', 'b2ContactID id')

typeconv 'b2Rot'
    .var('s', 'float s')
    .var('c', 'float c')

typeconv 'b2MassData'
    .var('mass', 'float mass')
    .var('center', 'b2Vec2 center')
    .var('I', 'float I')


typeconf 'b2Draw'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'void SetFlags(uint32 flags)')
    .func(nil, 'uint32 GetFlags()')
    .func(nil, 'void AppendFlags(uint32 flags)')
    .func(nil, 'void ClearFlags(uint32 flags)')
    .func(nil, 'void DrawPolygon(const b2Vec2 *vertices, int32 vertexCount, const b2Color &color)')
    .func(nil, 'void DrawSolidPolygon(const b2Vec2 *vertices, int32 vertexCount, const b2Color &color)')
    .func(nil, 'void DrawCircle(const b2Vec2 &center, float radius, const b2Color &color)')
    .func(nil, 'void DrawSolidCircle(const b2Vec2 &center, float radius, const b2Vec2 &axis, const b2Color &color)')
    .func(nil, 'void DrawSegment(const b2Vec2 &p1, const b2Vec2 &p2, const b2Color &color)')
    .func(nil, 'void DrawTransform(const b2Transform &xf)')
    .func(nil, 'void DrawPoint(const b2Vec2 &p, float size, const b2Color &color)')
    .prop('flags', nil, nil)

typeconf 'b2DestructionListener'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'void SayGoodbye(b2Joint *joint)', 'void SayGoodbye(b2Fixture *fixture)')

typeconf 'b2ContactFilter'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'bool ShouldCollide(b2Fixture *fixtureA, b2Fixture *fixtureB)')

typeconf 'b2ContactListener'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'void BeginContact(b2Contact *contact)')
    .func(nil, 'void EndContact(b2Contact *contact)')
    .func(nil, 'void PreSolve(b2Contact *contact, const b2Manifold *oldManifold)')
    .func(nil, 'void PostSolve(b2Contact *contact, const b2ContactImpulse *impulse)')

typeconf 'b2QueryCallback'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'bool ReportFixture(b2Fixture *fixture)')

typeconf 'b2RayCastCallback'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'float ReportFixture(b2Fixture *fixture, const b2Vec2 &point, const b2Vec2 &normal, float fraction)')

typeconf 'box2d::DestructionListener'
    .supercls('b2DestructionListener')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'DestructionListener()')
    .var('sayGoodbyeToJoint', '@nullable @localvar std::function<void (b2Joint *)> sayGoodbyeToJoint')
    .var('sayGoodbyeToFixture', '@nullable @localvar std::function<void (b2Fixture *)> sayGoodbyeToFixture')

typeconf 'box2d::ContactFilter'
    .supercls('b2ContactFilter')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'ContactFilter()')
    .var('shouldCollide', '@nullable @localvar std::function<bool (b2Fixture *, b2Fixture *)> shouldCollide')

typeconf 'box2d::ContactListener'
    .supercls('b2ContactListener')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'ContactListener()')
    .var('beginContact', '@nullable @localvar std::function<void (b2Contact *)> beginContact')
    .var('endContact', '@nullable @localvar std::function<void (b2Contact *)> endContact')
    .var('preSolve', '@nullable @localvar std::function<void (b2Contact *, const b2Manifold *)> preSolve')
    .var('postSolve', '@nullable @localvar std::function<void (b2Contact *, const b2ContactImpulse *)> postSolve')

typeconf 'box2d::QueryCallback'
    .supercls('b2QueryCallback')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'QueryCallback()')
    .var('reportFixture', '@nullable @localvar std::function<bool (b2Fixture *)> reportFixture')

typeconf 'box2d::RayCastCallback'
    .supercls('b2RayCastCallback')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'RayCastCallback()')
    .var('reportFixture', '@nullable @localvar std::function<float (b2Fixture *, const b2Vec2 &, const b2Vec2 &, float)> reportFixture')

typeconf 'box2d::Draw'
    .supercls('b2Draw')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'Draw()')
    .func(nil, 'cocos2d::DrawNode *getRenderer()')
    .prop('renderer', nil, nil)

typeconf 'b2MassData'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('mass', 'float mass')
    .var('center', 'b2Vec2 center')
    .var('I', 'float I')

typeconf 'b2Transform'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Transform()', 'b2Transform(const b2Vec2 &position, const b2Rot &rotation)')
    .func(nil, 'void SetIdentity()')
    .func(nil, 'void Set(const b2Vec2 &position, float angle)')
    .var('p', 'b2Vec2 p')
    .var('q', 'b2Rot q')

typeconf 'b2RayCastInput'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('p1', 'b2Vec2 p1')
    .var('p2', 'b2Vec2 p2')
    .var('maxFraction', 'float maxFraction')

typeconf 'b2RayCastOutput'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('normal', 'b2Vec2 normal')
    .var('fraction', 'float fraction')

typeconf 'b2Shape::Type'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .enum('circle', 'b2Shape::Type::e_circle')
    .enum('edge', 'b2Shape::Type::e_edge')
    .enum('polygon', 'b2Shape::Type::e_polygon')
    .enum('chain', 'b2Shape::Type::e_chain')
    .enum('typeCount', 'b2Shape::Type::e_typeCount')

typeconf 'b2Shape'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Shape::Type GetType()')
    .func(nil, 'int32 GetChildCount()')
    .func(nil, 'bool TestPoint(const b2Transform &xf, const b2Vec2 &p)')
    .func(nil, 'bool RayCast(b2RayCastOutput *output, const b2RayCastInput &input, const b2Transform &transform, int32 childIndex)')
    .func(nil, 'void ComputeAABB(b2AABB *aabb, const b2Transform &xf, int32 childIndex)')
    .func(nil, 'void ComputeMass(b2MassData *massData, float density)')
    .var('m_type', 'b2Shape::Type m_type')
    .var('m_radius', 'float m_radius')
    .prop('type', nil, nil)
    .prop('childCount', nil, nil)

typeconf 'b2PolygonShape'
    .supercls('b2Shape')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2PolygonShape()')
    .func(nil, 'void Set(const b2Vec2 *points, int32 count)')
    .func(nil, 'void SetAsBox(float hx, float hy)', 'void SetAsBox(float hx, float hy, const b2Vec2 &center, float angle)')
    .func(nil, 'bool Validate()')
    .var('m_centroid', 'b2Vec2 m_centroid')
    .var('m_count', 'int32 m_count')

typeconf 'b2EdgeShape'
    .supercls('b2Shape')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2EdgeShape()')
    .func(nil, 'void SetOneSided(const b2Vec2 &v0, const b2Vec2 &v1, const b2Vec2 &v2, const b2Vec2 &v3)')
    .func(nil, 'void SetTwoSided(const b2Vec2 &v1, const b2Vec2 &v2)')
    .var('m_vertex1', 'b2Vec2 m_vertex1')
    .var('m_vertex2', 'b2Vec2 m_vertex2')
    .var('m_vertex0', 'b2Vec2 m_vertex0')
    .var('m_vertex3', 'b2Vec2 m_vertex3')
    .var('m_oneSided', 'bool m_oneSided')

typeconf 'b2CircleShape'
    .supercls('b2Shape')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2CircleShape()')
    .var('m_p', 'b2Vec2 m_p')

typeconf 'b2ChainShape'
    .supercls('b2Shape')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2ChainShape()')
    .func(nil, 'void Clear()')
    .func(nil, 'void CreateLoop(const b2Vec2 *vertices, int32 count)')
    .func(nil, 'void CreateChain(const b2Vec2 *vertices, int32 count, const b2Vec2 &prevVertex, const b2Vec2 &nextVertex)')
    .func(nil, 'void GetChildEdge(b2EdgeShape *edge, int32 index)')
    .var('m_vertices', 'b2Vec2 *m_vertices')
    .var('m_count', 'int32 m_count')
    .var('m_prevVertex', 'b2Vec2 m_prevVertex')
    .var('m_nextVertex', 'b2Vec2 m_nextVertex')

typeconf 'b2BodyDef'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2BodyDef()')
    .var('type', 'b2BodyType type')
    .var('position', 'b2Vec2 position')
    .var('angle', 'float angle')
    .var('linearVelocity', 'b2Vec2 linearVelocity')
    .var('angularVelocity', 'float angularVelocity')
    .var('linearDamping', 'float linearDamping')
    .var('angularDamping', 'float angularDamping')
    .var('allowSleep', 'bool allowSleep')
    .var('awake', 'bool awake')
    .var('fixedRotation', 'bool fixedRotation')
    .var('bullet', 'bool bullet')
    .var('enabled', 'bool enabled')
    .var('userData', 'b2BodyUserData userData')
    .var('gravityScale', 'float gravityScale')

typeconf 'b2BodyType'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .enum('staticBody', 'b2BodyType::b2_staticBody')
    .enum('kinematicBody', 'b2BodyType::b2_kinematicBody')
    .enum('dynamicBody', 'b2BodyType::b2_dynamicBody')

typeconf 'b2Body'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Fixture *CreateFixture(const b2FixtureDef *def)', 'b2Fixture *CreateFixture(const b2Shape *shape, float density)')
    .func(nil, 'void DestroyFixture(b2Fixture *fixture)')
    .func(nil, 'void SetTransform(const b2Vec2 &position, float angle)')
    .func(nil, 'const b2Transform &GetTransform()')
    .func(nil, 'const b2Vec2 &GetPosition()')
    .func(nil, 'float GetAngle()')
    .func(nil, 'const b2Vec2 &GetWorldCenter()')
    .func(nil, 'const b2Vec2 &GetLocalCenter()')
    .func(nil, 'void SetLinearVelocity(const b2Vec2 &v)')
    .func(nil, 'const b2Vec2 &GetLinearVelocity()')
    .func(nil, 'void SetAngularVelocity(float omega)')
    .func(nil, 'float GetAngularVelocity()')
    .func(nil, 'void ApplyForce(const b2Vec2 &force, const b2Vec2 &point, bool wake)')
    .func(nil, 'void ApplyForceToCenter(const b2Vec2 &force, bool wake)')
    .func(nil, 'void ApplyTorque(float torque, bool wake)')
    .func(nil, 'void ApplyLinearImpulse(const b2Vec2 &impulse, const b2Vec2 &point, bool wake)')
    .func(nil, 'void ApplyLinearImpulseToCenter(const b2Vec2 &impulse, bool wake)')
    .func(nil, 'void ApplyAngularImpulse(float impulse, bool wake)')
    .func(nil, 'float GetMass()')
    .func(nil, 'float GetInertia()')
    .func(nil, 'b2MassData GetMassData()')
    .func(nil, 'void SetMassData(const b2MassData *data)')
    .func(nil, 'void ResetMassData()')
    .func(nil, 'b2Vec2 GetWorldPoint(const b2Vec2 &localPoint)')
    .func(nil, 'b2Vec2 GetWorldVector(const b2Vec2 &localVector)')
    .func(nil, 'b2Vec2 GetLocalPoint(const b2Vec2 &worldPoint)')
    .func(nil, 'b2Vec2 GetLocalVector(const b2Vec2 &worldVector)')
    .func(nil, 'b2Vec2 GetLinearVelocityFromWorldPoint(const b2Vec2 &worldPoint)')
    .func(nil, 'b2Vec2 GetLinearVelocityFromLocalPoint(const b2Vec2 &localPoint)')
    .func(nil, 'float GetLinearDamping()')
    .func(nil, 'void SetLinearDamping(float linearDamping)')
    .func(nil, 'float GetAngularDamping()')
    .func(nil, 'void SetAngularDamping(float angularDamping)')
    .func(nil, 'float GetGravityScale()')
    .func(nil, 'void SetGravityScale(float scale)')
    .func(nil, 'void SetType(b2BodyType type)')
    .func(nil, 'b2BodyType GetType()')
    .func(nil, 'void SetBullet(bool flag)')
    .func(nil, 'bool IsBullet()')
    .func(nil, 'void SetSleepingAllowed(bool flag)')
    .func(nil, 'bool IsSleepingAllowed()')
    .func(nil, 'void SetAwake(bool flag)')
    .func(nil, 'bool IsAwake()')
    .func(nil, 'void SetEnabled(bool flag)')
    .func(nil, 'bool IsEnabled()')
    .func(nil, 'void SetFixedRotation(bool flag)')
    .func(nil, 'bool IsFixedRotation()')
    .func(nil, 'b2Fixture *GetFixtureList()')
    .func(nil, 'b2JointEdge *GetJointList()')
    .func(nil, 'b2ContactEdge *GetContactList()')
    .func(nil, 'b2Body *GetNext()')
    .func(nil, 'b2BodyUserData &GetUserData()')
    .func(nil, 'b2World *GetWorld()')
    .func(nil, 'void Dump()')
    .prop('position', nil, nil)
    .prop('angle', nil, nil)
    .prop('worldCenter', nil, nil)
    .prop('localCenter', nil, nil)
    .prop('linearVelocity', nil, nil)
    .prop('angularVelocity', nil, nil)
    .prop('mass', nil, nil)
    .prop('inertia', nil, nil)
    .prop('massData', nil, nil)
    .prop('linearDamping', nil, nil)
    .prop('angularDamping', nil, nil)
    .prop('gravityScale', nil, nil)
    .prop('type', nil, nil)
    .prop('bullet', nil, nil)
    .prop('sleepingAllowed', nil, nil)
    .prop('awake', nil, nil)
    .prop('enabled', nil, nil)
    .prop('fixedRotation', nil, nil)
    .prop('fixtureList', nil, nil)
    .prop('jointList', nil, nil)
    .prop('contactList', nil, nil)
    .prop('next', nil, nil)
    .prop('userData', nil, nil)
    .prop('world', nil, nil)

typeconf 'b2BodyUserData'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2BodyUserData()')
    .var('pointer', 'uintptr_t pointer')

typeconf 'b2FixtureDef'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2FixtureDef()')
    .var('shape', 'const b2Shape *shape')
    .var('userData', 'b2FixtureUserData userData')
    .var('friction', 'float friction')
    .var('restitution', 'float restitution')
    .var('restitutionThreshold', 'float restitutionThreshold')
    .var('density', 'float density')
    .var('isSensor', 'bool isSensor')
    .var('filter', 'b2Filter filter')

typeconf 'b2Fixture'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Shape::Type GetType()')
    .func(nil, 'b2Shape *GetShape()')
    .func(nil, 'void SetSensor(bool sensor)')
    .func(nil, 'bool IsSensor()')
    .func(nil, 'void SetFilterData(const b2Filter &filter)')
    .func(nil, 'const b2Filter &GetFilterData()')
    .func(nil, 'void Refilter()')
    .func(nil, 'b2Body *GetBody()')
    .func(nil, 'b2Fixture *GetNext()')
    .func(nil, 'b2FixtureUserData &GetUserData()')
    .func(nil, 'bool TestPoint(const b2Vec2 &p)')
    .func(nil, 'bool RayCast(b2RayCastOutput *output, const b2RayCastInput &input, int32 childIndex)')
    .func(nil, 'void GetMassData(b2MassData *massData)')
    .func(nil, 'void SetDensity(float density)')
    .func(nil, 'float GetDensity()')
    .func(nil, 'float GetFriction()')
    .func(nil, 'void SetFriction(float friction)')
    .func(nil, 'float GetRestitution()')
    .func(nil, 'void SetRestitution(float restitution)')
    .func(nil, 'float GetRestitutionThreshold()')
    .func(nil, 'void SetRestitutionThreshold(float threshold)')
    .func(nil, 'const b2AABB &GetAABB(int32 childIndex)')
    .func(nil, 'void Dump(int32 bodyIndex)')
    .prop('type', nil, nil)
    .prop('shape', nil, nil)
    .prop('sensor', nil, nil)
    .prop('filterData', nil, nil)
    .prop('body', nil, nil)
    .prop('next', nil, nil)
    .prop('userData', nil, nil)
    .prop('density', nil, nil)
    .prop('friction', nil, nil)
    .prop('restitution', nil, nil)
    .prop('restitutionThreshold', nil, nil)

typeconf 'b2JointDef'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2JointDef()')
    .var('type', 'b2JointType type')
    .var('userData', 'b2JointUserData userData')
    .var('bodyA', 'b2Body *bodyA')
    .var('bodyB', 'b2Body *bodyB')
    .var('collideConnected', 'bool collideConnected')

typeconf 'b2JointType'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .enum('unknownJoint', 'b2JointType::e_unknownJoint')
    .enum('revoluteJoint', 'b2JointType::e_revoluteJoint')
    .enum('prismaticJoint', 'b2JointType::e_prismaticJoint')
    .enum('distanceJoint', 'b2JointType::e_distanceJoint')
    .enum('pulleyJoint', 'b2JointType::e_pulleyJoint')
    .enum('mouseJoint', 'b2JointType::e_mouseJoint')
    .enum('gearJoint', 'b2JointType::e_gearJoint')
    .enum('wheelJoint', 'b2JointType::e_wheelJoint')
    .enum('weldJoint', 'b2JointType::e_weldJoint')
    .enum('frictionJoint', 'b2JointType::e_frictionJoint')
    .enum('motorJoint', 'b2JointType::e_motorJoint')

typeconf 'b2Joint'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2JointType GetType()')
    .func(nil, 'b2Body *GetBodyA()')
    .func(nil, 'b2Body *GetBodyB()')
    .func(nil, 'b2Vec2 GetAnchorA()')
    .func(nil, 'b2Vec2 GetAnchorB()')
    .func(nil, 'b2Vec2 GetReactionForce(float inv_dt)')
    .func(nil, 'float GetReactionTorque(float inv_dt)')
    .func(nil, 'b2Joint *GetNext()')
    .func(nil, 'b2JointUserData &GetUserData()')
    .func(nil, 'bool IsEnabled()')
    .func(nil, 'bool GetCollideConnected()')
    .func(nil, 'void Dump()')
    .func(nil, 'void ShiftOrigin(const b2Vec2 &newOrigin)')
    .func(nil, 'void Draw(b2Draw *draw)')
    .prop('type', nil, nil)
    .prop('bodyA', nil, nil)
    .prop('bodyB', nil, nil)
    .prop('anchorA', nil, nil)
    .prop('anchorB', nil, nil)
    .prop('next', nil, nil)
    .prop('userData', nil, nil)
    .prop('enabled', nil, nil)
    .prop('collideConnected', nil, nil)

typeconf 'b2DistanceJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2DistanceJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &anchorA, const b2Vec2 &anchorB)')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('length', 'float length')
    .var('minLength', 'float minLength')
    .var('maxLength', 'float maxLength')
    .var('stiffness', 'float stiffness')
    .var('damping', 'float damping')

typeconf 'b2DistanceJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'const b2Vec2 &GetLocalAnchorA()')
    .func(nil, 'const b2Vec2 &GetLocalAnchorB()')
    .func(nil, 'float GetLength()')
    .func(nil, 'float SetLength(float length)')
    .func(nil, 'float GetMinLength()')
    .func(nil, 'float SetMinLength(float minLength)')
    .func(nil, 'float GetMaxLength()')
    .func(nil, 'float SetMaxLength(float maxLength)')
    .func(nil, 'float GetCurrentLength()')
    .func(nil, 'void SetStiffness(float stiffness)')
    .func(nil, 'float GetStiffness()')
    .func(nil, 'void SetDamping(float damping)')
    .func(nil, 'float GetDamping()')
    .prop('localAnchorA', nil, nil)
    .prop('localAnchorB', nil, nil)
    .prop('length', nil, nil)
    .prop('minLength', nil, nil)
    .prop('maxLength', nil, nil)
    .prop('currentLength', nil, nil)
    .prop('stiffness', nil, nil)
    .prop('damping', nil, nil)

typeconf 'b2FrictionJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2FrictionJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &anchor)')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('maxForce', 'float maxForce')
    .var('maxTorque', 'float maxTorque')

typeconf 'b2FrictionJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'const b2Vec2 &GetLocalAnchorA()')
    .func(nil, 'const b2Vec2 &GetLocalAnchorB()')
    .func(nil, 'void SetMaxForce(float force)')
    .func(nil, 'float GetMaxForce()')
    .func(nil, 'void SetMaxTorque(float torque)')
    .func(nil, 'float GetMaxTorque()')
    .prop('localAnchorA', nil, nil)
    .prop('localAnchorB', nil, nil)
    .prop('maxForce', nil, nil)
    .prop('maxTorque', nil, nil)

typeconf 'b2GearJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2GearJointDef()')
    .var('joint1', 'b2Joint *joint1')
    .var('joint2', 'b2Joint *joint2')
    .var('ratio', 'float ratio')

typeconf 'b2GearJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Joint *GetJoint1()')
    .func(nil, 'b2Joint *GetJoint2()')
    .func(nil, 'void SetRatio(float ratio)')
    .func(nil, 'float GetRatio()')
    .prop('joint1', nil, nil)
    .prop('joint2', nil, nil)
    .prop('ratio', nil, nil)

typeconf 'b2MotorJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2MotorJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB)')
    .var('linearOffset', 'b2Vec2 linearOffset')
    .var('angularOffset', 'float angularOffset')
    .var('maxForce', 'float maxForce')
    .var('maxTorque', 'float maxTorque')
    .var('correctionFactor', 'float correctionFactor')

typeconf 'b2MotorJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'void SetLinearOffset(const b2Vec2 &linearOffset)')
    .func(nil, 'const b2Vec2 &GetLinearOffset()')
    .func(nil, 'void SetAngularOffset(float angularOffset)')
    .func(nil, 'float GetAngularOffset()')
    .func(nil, 'void SetMaxForce(float force)')
    .func(nil, 'float GetMaxForce()')
    .func(nil, 'void SetMaxTorque(float torque)')
    .func(nil, 'float GetMaxTorque()')
    .func(nil, 'void SetCorrectionFactor(float factor)')
    .func(nil, 'float GetCorrectionFactor()')
    .prop('linearOffset', nil, nil)
    .prop('angularOffset', nil, nil)
    .prop('maxForce', nil, nil)
    .prop('maxTorque', nil, nil)
    .prop('correctionFactor', nil, nil)

typeconf 'b2MouseJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2MouseJointDef()')
    .var('target', 'b2Vec2 target')
    .var('maxForce', 'float maxForce')
    .var('stiffness', 'float stiffness')
    .var('damping', 'float damping')

typeconf 'b2MouseJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'void SetTarget(const b2Vec2 &target)')
    .func(nil, 'const b2Vec2 &GetTarget()')
    .func(nil, 'void SetMaxForce(float force)')
    .func(nil, 'float GetMaxForce()')
    .func(nil, 'void SetStiffness(float stiffness)')
    .func(nil, 'float GetStiffness()')
    .func(nil, 'void SetDamping(float damping)')
    .func(nil, 'float GetDamping()')
    .prop('target', nil, nil)
    .prop('maxForce', nil, nil)
    .prop('stiffness', nil, nil)
    .prop('damping', nil, nil)

typeconf 'b2PrismaticJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2PrismaticJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &anchor, const b2Vec2 &axis)')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('localAxisA', 'b2Vec2 localAxisA')
    .var('referenceAngle', 'float referenceAngle')
    .var('enableLimit', 'bool enableLimit')
    .var('lowerTranslation', 'float lowerTranslation')
    .var('upperTranslation', 'float upperTranslation')
    .var('enableMotor', 'bool enableMotor')
    .var('maxMotorForce', 'float maxMotorForce')
    .var('motorSpeed', 'float motorSpeed')

typeconf 'b2PrismaticJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'const b2Vec2 &GetLocalAnchorA()')
    .func(nil, 'const b2Vec2 &GetLocalAnchorB()')
    .func(nil, 'const b2Vec2 &GetLocalAxisA()')
    .func(nil, 'float GetReferenceAngle()')
    .func(nil, 'float GetJointTranslation()')
    .func(nil, 'float GetJointSpeed()')
    .func(nil, 'bool IsLimitEnabled()')
    .func(nil, 'void EnableLimit(bool flag)')
    .func(nil, 'float GetLowerLimit()')
    .func(nil, 'float GetUpperLimit()')
    .func(nil, 'void SetLimits(float lower, float upper)')
    .func(nil, 'bool IsMotorEnabled()')
    .func(nil, 'void EnableMotor(bool flag)')
    .func(nil, 'void SetMotorSpeed(float speed)')
    .func(nil, 'float GetMotorSpeed()')
    .func(nil, 'void SetMaxMotorForce(float force)')
    .func(nil, 'float GetMaxMotorForce()')
    .func(nil, 'float GetMotorForce(float inv_dt)')
    .prop('localAnchorA', nil, nil)
    .prop('localAnchorB', nil, nil)
    .prop('localAxisA', nil, nil)
    .prop('referenceAngle', nil, nil)
    .prop('jointTranslation', nil, nil)
    .prop('jointSpeed', nil, nil)
    .prop('limitEnabled', nil, nil)
    .prop('lowerLimit', nil, nil)
    .prop('upperLimit', nil, nil)
    .prop('motorEnabled', nil, nil)
    .prop('motorSpeed', nil, nil)
    .prop('maxMotorForce', nil, nil)

typeconf 'b2PulleyJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2PulleyJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &groundAnchorA, const b2Vec2 &groundAnchorB, const b2Vec2 &anchorA, const b2Vec2 &anchorB, float ratio)')
    .var('groundAnchorA', 'b2Vec2 groundAnchorA')
    .var('groundAnchorB', 'b2Vec2 groundAnchorB')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('lengthA', 'float lengthA')
    .var('lengthB', 'float lengthB')
    .var('ratio', 'float ratio')

typeconf 'b2PulleyJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Vec2 GetGroundAnchorA()')
    .func(nil, 'b2Vec2 GetGroundAnchorB()')
    .func(nil, 'float GetLengthA()')
    .func(nil, 'float GetLengthB()')
    .func(nil, 'float GetRatio()')
    .func(nil, 'float GetCurrentLengthA()')
    .func(nil, 'float GetCurrentLengthB()')
    .prop('groundAnchorA', nil, nil)
    .prop('groundAnchorB', nil, nil)
    .prop('lengthA', nil, nil)
    .prop('lengthB', nil, nil)
    .prop('ratio', nil, nil)
    .prop('currentLengthA', nil, nil)
    .prop('currentLengthB', nil, nil)

typeconf 'b2RevoluteJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2RevoluteJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &anchor)')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('referenceAngle', 'float referenceAngle')
    .var('enableLimit', 'bool enableLimit')
    .var('lowerAngle', 'float lowerAngle')
    .var('upperAngle', 'float upperAngle')
    .var('enableMotor', 'bool enableMotor')
    .var('motorSpeed', 'float motorSpeed')
    .var('maxMotorTorque', 'float maxMotorTorque')

typeconf 'b2RevoluteJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'const b2Vec2 &GetLocalAnchorA()')
    .func(nil, 'const b2Vec2 &GetLocalAnchorB()')
    .func(nil, 'float GetReferenceAngle()')
    .func(nil, 'float GetJointAngle()')
    .func(nil, 'float GetJointSpeed()')
    .func(nil, 'bool IsLimitEnabled()')
    .func(nil, 'void EnableLimit(bool flag)')
    .func(nil, 'float GetLowerLimit()')
    .func(nil, 'float GetUpperLimit()')
    .func(nil, 'void SetLimits(float lower, float upper)')
    .func(nil, 'bool IsMotorEnabled()')
    .func(nil, 'void EnableMotor(bool flag)')
    .func(nil, 'void SetMotorSpeed(float speed)')
    .func(nil, 'float GetMotorSpeed()')
    .func(nil, 'void SetMaxMotorTorque(float torque)')
    .func(nil, 'float GetMaxMotorTorque()')
    .func(nil, 'float GetMotorTorque(float inv_dt)')
    .prop('localAnchorA', nil, nil)
    .prop('localAnchorB', nil, nil)
    .prop('referenceAngle', nil, nil)
    .prop('jointAngle', nil, nil)
    .prop('jointSpeed', nil, nil)
    .prop('limitEnabled', nil, nil)
    .prop('lowerLimit', nil, nil)
    .prop('upperLimit', nil, nil)
    .prop('motorEnabled', nil, nil)
    .prop('motorSpeed', nil, nil)
    .prop('maxMotorTorque', nil, nil)

typeconf 'b2WeldJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2WeldJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &anchor)')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('referenceAngle', 'float referenceAngle')
    .var('stiffness', 'float stiffness')
    .var('damping', 'float damping')

typeconf 'b2WeldJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'const b2Vec2 &GetLocalAnchorA()')
    .func(nil, 'const b2Vec2 &GetLocalAnchorB()')
    .func(nil, 'float GetReferenceAngle()')
    .func(nil, 'void SetStiffness(float stiffness)')
    .func(nil, 'float GetStiffness()')
    .func(nil, 'void SetDamping(float damping)')
    .func(nil, 'float GetDamping()')
    .prop('localAnchorA', nil, nil)
    .prop('localAnchorB', nil, nil)
    .prop('referenceAngle', nil, nil)
    .prop('stiffness', nil, nil)
    .prop('damping', nil, nil)

typeconf 'b2WheelJointDef'
    .supercls('b2JointDef')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2WheelJointDef()')
    .func(nil, 'void Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &anchor, const b2Vec2 &axis)')
    .var('localAnchorA', 'b2Vec2 localAnchorA')
    .var('localAnchorB', 'b2Vec2 localAnchorB')
    .var('localAxisA', 'b2Vec2 localAxisA')
    .var('enableLimit', 'bool enableLimit')
    .var('lowerTranslation', 'float lowerTranslation')
    .var('upperTranslation', 'float upperTranslation')
    .var('enableMotor', 'bool enableMotor')
    .var('maxMotorTorque', 'float maxMotorTorque')
    .var('motorSpeed', 'float motorSpeed')
    .var('stiffness', 'float stiffness')
    .var('damping', 'float damping')

typeconf 'b2WheelJoint'
    .supercls('b2Joint')
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'const b2Vec2 &GetLocalAnchorA()')
    .func(nil, 'const b2Vec2 &GetLocalAnchorB()')
    .func(nil, 'const b2Vec2 &GetLocalAxisA()')
    .func(nil, 'float GetJointTranslation()')
    .func(nil, 'float GetJointLinearSpeed()')
    .func(nil, 'float GetJointAngle()')
    .func(nil, 'float GetJointAngularSpeed()')
    .func(nil, 'bool IsLimitEnabled()')
    .func(nil, 'void EnableLimit(bool flag)')
    .func(nil, 'float GetLowerLimit()')
    .func(nil, 'float GetUpperLimit()')
    .func(nil, 'void SetLimits(float lower, float upper)')
    .func(nil, 'bool IsMotorEnabled()')
    .func(nil, 'void EnableMotor(bool flag)')
    .func(nil, 'void SetMotorSpeed(float speed)')
    .func(nil, 'float GetMotorSpeed()')
    .func(nil, 'void SetMaxMotorTorque(float torque)')
    .func(nil, 'float GetMaxMotorTorque()')
    .func(nil, 'float GetMotorTorque(float inv_dt)')
    .func(nil, 'void SetStiffness(float stiffness)')
    .func(nil, 'float GetStiffness()')
    .func(nil, 'void SetDamping(float damping)')
    .func(nil, 'float GetDamping()')
    .prop('localAnchorA', nil, nil)
    .prop('localAnchorB', nil, nil)
    .prop('localAxisA', nil, nil)
    .prop('jointTranslation', nil, nil)
    .prop('jointLinearSpeed', nil, nil)
    .prop('jointAngle', nil, nil)
    .prop('jointAngularSpeed', nil, nil)
    .prop('limitEnabled', nil, nil)
    .prop('lowerLimit', nil, nil)
    .prop('upperLimit', nil, nil)
    .prop('motorEnabled', nil, nil)
    .prop('motorSpeed', nil, nil)
    .prop('maxMotorTorque', nil, nil)
    .prop('stiffness', nil, nil)
    .prop('damping', nil, nil)

typeconf 'b2JointEdge'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('other', 'b2Body *other')
    .var('joint', 'b2Joint *joint')
    .var('prev', 'b2JointEdge *prev')
    .var('next', 'b2JointEdge *next')

typeconf 'b2JointUserData'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2JointUserData()')
    .var('pointer', 'uintptr_t pointer')

typeconf 'b2ContactEdge'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('other', 'b2Body *other')
    .var('contact', 'b2Contact *contact')
    .var('prev', 'b2ContactEdge *prev')
    .var('next', 'b2ContactEdge *next')

typeconf 'b2ContactManager'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2ContactManager()')
    .func(nil, 'void AddPair(void *proxyUserDataA, void *proxyUserDataB)')
    .func(nil, 'void FindNewContacts()')
    .func(nil, 'void Destroy(b2Contact *c)')
    .func(nil, 'void Collide()')
    .var('m_broadPhase', 'b2BroadPhase m_broadPhase')
    .var('m_contactList', 'b2Contact *m_contactList')
    .var('m_contactCount', 'int32 m_contactCount')
    .var('m_contactFilter', 'b2ContactFilter *m_contactFilter')
    .var('m_contactListener', 'b2ContactListener *m_contactListener')

typeconf 'b2Profile'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('step', 'float step')
    .var('collide', 'float collide')
    .var('solve', 'float solve')
    .var('solveInit', 'float solveInit')
    .var('solveVelocity', 'float solveVelocity')
    .var('solvePosition', 'float solvePosition')
    .var('broadphase', 'float broadphase')
    .var('solveTOI', 'float solveTOI')

typeconf 'b2BroadPhase'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2BroadPhase()')
    .func(nil, 'int32 CreateProxy(const b2AABB &aabb, void *userData)')
    .func(nil, 'void DestroyProxy(int32 proxyId)')
    .func(nil, 'void MoveProxy(int32 proxyId, const b2AABB &aabb, const b2Vec2 &displacement)')
    .func(nil, 'void TouchProxy(int32 proxyId)')
    .func(nil, 'const b2AABB &GetFatAABB(int32 proxyId)')
    .func(nil, 'void *GetUserData(int32 proxyId)')
    .func(nil, 'bool TestOverlap(int32 proxyIdA, int32 proxyIdB)')
    .func(nil, 'int32 GetProxyCount()')
    .func(nil, 'int32 GetTreeHeight()')
    .func(nil, 'int32 GetTreeBalance()')
    .func(nil, 'float GetTreeQuality()')
    .func(nil, 'void ShiftOrigin(const b2Vec2 &newOrigin)')
    .prop('proxyCount', nil, nil)
    .prop('treeHeight', nil, nil)
    .prop('treeBalance', nil, nil)
    .prop('treeQuality', nil, nil)

typeconf 'b2AABB'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'bool IsValid()')
    .func(nil, 'b2Vec2 GetCenter()')
    .func(nil, 'b2Vec2 GetExtents()')
    .func(nil, 'float GetPerimeter()')
    .func(nil, 'void Combine(const b2AABB &aabb)', 'void Combine(const b2AABB &aabb1, const b2AABB &aabb2)')
    .func(nil, 'bool Contains(const b2AABB &aabb)')
    .func(nil, 'bool RayCast(b2RayCastOutput *output, const b2RayCastInput &input)')
    .var('lowerBound', 'b2Vec2 lowerBound')
    .var('upperBound', 'b2Vec2 upperBound')
    .prop('valid', nil, nil)
    .prop('center', nil, nil)
    .prop('extents', nil, nil)
    .prop('perimeter', nil, nil)

typeconf 'b2Contact'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2Manifold *GetManifold()')
    .func(nil, 'void GetWorldManifold(b2WorldManifold *worldManifold)')
    .func(nil, 'bool IsTouching()')
    .func(nil, 'void SetEnabled(bool flag)')
    .func(nil, 'bool IsEnabled()')
    .func(nil, 'b2Contact *GetNext()')
    .func(nil, 'b2Fixture *GetFixtureA()')
    .func(nil, 'int32 GetChildIndexA()')
    .func(nil, 'b2Fixture *GetFixtureB()')
    .func(nil, 'int32 GetChildIndexB()')
    .func(nil, 'void SetFriction(float friction)')
    .func(nil, 'float GetFriction()')
    .func(nil, 'void ResetFriction()')
    .func(nil, 'void SetRestitution(float restitution)')
    .func(nil, 'float GetRestitution()')
    .func(nil, 'void ResetRestitution()')
    .func(nil, 'void SetRestitutionThreshold(float threshold)')
    .func(nil, 'float GetRestitutionThreshold()')
    .func(nil, 'void ResetRestitutionThreshold()')
    .func(nil, 'void SetTangentSpeed(float speed)')
    .func(nil, 'float GetTangentSpeed()')
    .func(nil, 'void Evaluate(b2Manifold *manifold, const b2Transform &xfA, const b2Transform &xfB)')
    .prop('manifold', nil, nil)
    .prop('touching', nil, nil)
    .prop('enabled', nil, nil)
    .prop('next', nil, nil)
    .prop('fixtureA', nil, nil)
    .prop('childIndexA', nil, nil)
    .prop('fixtureB', nil, nil)
    .prop('childIndexB', nil, nil)
    .prop('friction', nil, nil)
    .prop('restitution', nil, nil)
    .prop('restitutionThreshold', nil, nil)
    .prop('tangentSpeed', nil, nil)

typeconf 'b2ContactImpulse'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('count', 'int32 count')

typeconf 'b2Manifold'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .var('localNormal', 'b2Vec2 localNormal')
    .var('localPoint', 'b2Vec2 localPoint')
    .var('type', 'b2Manifold::Type type')
    .var('pointCount', 'int32 pointCount')

typeconf 'b2Manifold::Type'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .enum('circles', 'b2Manifold::Type::e_circles')
    .enum('faceA', 'b2Manifold::Type::e_faceA')
    .enum('faceB', 'b2Manifold::Type::e_faceB')

typeconf 'b2World'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'b2World(const b2Vec2 &gravity)')
    .func(nil, 'void SetDestructionListener(@addref(destructionListener ^) b2DestructionListener *listener)')
    .func(nil, 'void SetContactFilter(@addref(contactFilter ^) b2ContactFilter *filter)')
    .func(nil, 'void SetContactListener(@addref(contactListener ^) b2ContactListener *listener)')
    .func(nil, 'void SetDebugDraw(@addref(debugDraw ^) b2Draw *debugDraw)')
    .func(nil, 'b2Body *CreateBody(const b2BodyDef *def)')
    .func(nil, 'void DestroyBody(b2Body *body)')
    .func(nil, 'b2Joint *CreateJoint(const b2JointDef *def)')
    .func(nil, 'void DestroyJoint(b2Joint *joint)')
    .func(nil, 'void Step(float timeStep, int32 velocityIterations, int32 positionIterations)')
    .func(nil, 'void ClearForces()')
    .func(nil, 'void DebugDraw()')
    .func(nil, 'void QueryAABB(b2QueryCallback *callback, const b2AABB &aabb)')
    .func(nil, 'void RayCast(b2RayCastCallback *callback, const b2Vec2 &point1, const b2Vec2 &point2)')
    .func(nil, 'b2Body *GetBodyList()')
    .func(nil, 'b2Joint *GetJointList()')
    .func(nil, 'b2Contact *GetContactList()')
    .func(nil, 'void SetAllowSleeping(bool flag)')
    .func(nil, 'bool GetAllowSleeping()')
    .func(nil, 'void SetWarmStarting(bool flag)')
    .func(nil, 'bool GetWarmStarting()')
    .func(nil, 'void SetContinuousPhysics(bool flag)')
    .func(nil, 'bool GetContinuousPhysics()')
    .func(nil, 'void SetSubStepping(bool flag)')
    .func(nil, 'bool GetSubStepping()')
    .func(nil, 'int32 GetProxyCount()')
    .func(nil, 'int32 GetBodyCount()')
    .func(nil, 'int32 GetJointCount()')
    .func(nil, 'int32 GetContactCount()')
    .func(nil, 'int32 GetTreeHeight()')
    .func(nil, 'int32 GetTreeBalance()')
    .func(nil, 'float GetTreeQuality()')
    .func(nil, 'void SetGravity(const b2Vec2 &gravity)')
    .func(nil, 'b2Vec2 GetGravity()')
    .func(nil, 'bool IsLocked()')
    .func(nil, 'void SetAutoClearForces(bool flag)')
    .func(nil, 'bool GetAutoClearForces()')
    .func(nil, 'void ShiftOrigin(const b2Vec2 &newOrigin)')
    .func(nil, 'const b2ContactManager &GetContactManager()')
    .func(nil, 'const b2Profile &GetProfile()')
    .func(nil, 'void Dump()')
    .prop('bodyList', nil, nil)
    .prop('jointList', nil, nil)
    .prop('contactList', nil, nil)
    .prop('allowSleeping', nil, nil)
    .prop('warmStarting', nil, nil)
    .prop('continuousPhysics', nil, nil)
    .prop('subStepping', nil, nil)
    .prop('proxyCount', nil, nil)
    .prop('bodyCount', nil, nil)
    .prop('jointCount', nil, nil)
    .prop('contactCount', nil, nil)
    .prop('treeHeight', nil, nil)
    .prop('treeBalance', nil, nil)
    .prop('treeQuality', nil, nil)
    .prop('gravity', nil, nil)
    .prop('locked', nil, nil)
    .prop('autoClearForces', nil, nil)
    .prop('contactManager', nil, nil)
    .prop('profile', nil, nil)

typeconf 'b2WorldManifold'
    .supercls(nil)
    .reg_luatype(true)
    .chunk(nil)
    .luaopen(nil)
    .func(nil, 'void Initialize(const b2Manifold *manifold, const b2Transform &xfA, float radiusA, const b2Transform &xfB, float radiusB)')
    .var('normal', 'b2Vec2 normal')
